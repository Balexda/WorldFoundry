name: Platform Builds

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'platforms/**'
      - 'core/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'platforms/**'
      - 'core/**'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Windows Platform (WinUI 3)
  windows-platform:
    name: Windows Platform Build
    runs-on: windows-latest
    if: false  # Disabled until platform implementation exists
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: x86_64-pc-windows-msvc

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          platforms/windows/bin
          platforms/windows/obj
        key: ${{ runner.os }}-windows-platform-${{ hashFiles('**/Cargo.lock', '**/packages.lock.json') }}

    - name: Build Windows platform
      working-directory: platforms/windows
      run: |
        dotnet restore
        dotnet build --configuration Release

    - name: Run Windows tests
      working-directory: platforms/windows
      run: dotnet test --configuration Release --no-build

    - name: Package Windows app
      working-directory: platforms/windows
      run: dotnet publish --configuration Release --output ./publish

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v3
      with:
        name: world-foundry-windows-app
        path: platforms/windows/publish/

  # iOS Platform (SwiftUI)
  ios-platform:
    name: iOS Platform Build
    runs-on: macos-latest
    if: false  # Disabled until platform implementation exists
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-apple-ios,x86_64-apple-ios

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          platforms/ios/DerivedData
        key: ${{ runner.os }}-ios-platform-${{ hashFiles('**/Cargo.lock', '**/Package.resolved') }}

    - name: Build iOS platform
      working-directory: platforms/ios
      run: |
        xcodebuild -scheme WorldFoundry \
          -destination 'platform=iOS Simulator,name=iPhone 15' \
          -configuration Release \
          build

    - name: Run iOS tests
      working-directory: platforms/ios
      run: |
        xcodebuild -scheme WorldFoundry \
          -destination 'platform=iOS Simulator,name=iPhone 15' \
          -configuration Release \
          test

    - name: Archive iOS app
      working-directory: platforms/ios
      run: |
        xcodebuild -scheme WorldFoundry \
          -configuration Release \
          -archivePath ./build/WorldFoundry.xcarchive \
          archive

    - name: Upload iOS artifact
      uses: actions/upload-artifact@v3
      with:
        name: world-foundry-ios-app
        path: platforms/ios/build/WorldFoundry.xcarchive

  # Android Platform (Jetpack Compose)
  android-platform:
    name: Android Platform Build
    runs-on: ubuntu-latest
    if: false  # Disabled until platform implementation exists
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-linux-android,armv7-linux-androideabi,x86_64-linux-android,i686-linux-android

    - name: Install NDK
      run: |
        sdkmanager "ndk;25.2.9519653"
        echo "ANDROID_NDK_ROOT=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.gradle/caches
          ~/.android/build-cache
        key: ${{ runner.os }}-android-platform-${{ hashFiles('**/Cargo.lock', '**/gradle-wrapper.properties') }}

    - name: Build Android platform
      working-directory: platforms/android
      run: |
        ./gradlew assembleRelease

    - name: Run Android tests
      working-directory: platforms/android
      run: |
        ./gradlew testReleaseUnitTest

    - name: Upload Android artifact
      uses: actions/upload-artifact@v3
      with:
        name: world-foundry-android-app
        path: platforms/android/app/build/outputs/apk/release/

  # Cross-platform integration test
  integration-test:
    name: Cross-Platform Integration Test
    runs-on: ubuntu-latest
    needs: [windows-platform, ios-platform, android-platform]
    if: false  # Disabled until platform implementations exist
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Verify platform artifacts
      run: |
        echo "## Platform Build Verification" > integration-report.md
        echo "" >> integration-report.md
        
        if [ -d "world-foundry-windows-app" ]; then
          echo "✅ Windows platform build successful" >> integration-report.md
        else
          echo "❌ Windows platform build failed" >> integration-report.md
        fi
        
        if [ -d "world-foundry-ios-app" ]; then
          echo "✅ iOS platform build successful" >> integration-report.md
        else
          echo "❌ iOS platform build failed" >> integration-report.md
        fi
        
        if [ -d "world-foundry-android-app" ]; then
          echo "✅ Android platform build successful" >> integration-report.md
        else
          echo "❌ Android platform build failed" >> integration-report.md
        fi

    - name: Upload integration report
      uses: actions/upload-artifact@v3
      with:
        name: integration-test-report
        path: integration-report.md

  # Future: Web Platform (WASM)
  web-platform:
    name: Web Platform Build
    runs-on: ubuntu-latest
    if: false  # Disabled until platform implementation exists
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: wasm32-unknown-unknown

    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

    - name: Build WASM package
      working-directory: core
      run: wasm-pack build --target web --out-dir ../platforms/web/pkg

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Build web platform
      working-directory: platforms/web
      run: |
        npm install
        npm run build

    - name: Upload web artifact
      uses: actions/upload-artifact@v3
      with:
        name: world-foundry-web-app
        path: platforms/web/dist/