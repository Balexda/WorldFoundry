name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          # Reduce CI load by testing beta only on Ubuntu
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: core

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libfontconfig1-dev \
          libfreetype6-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libegl1-mesa-dev \
          libxcb-composite0-dev \
          libxcb-shape0-dev \
          libxcb-xfixes0-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Install any macOS-specific dependencies if needed
        echo "macOS dependencies installed"

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Install any Windows-specific dependencies if needed
        echo "Windows dependencies installed"

    - name: Check code formatting
      working-directory: core
      run: cargo fmt --all -- --check

    - name: Run Clippy lints
      working-directory: core
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build core engine
      working-directory: core
      run: cargo build --verbose --all-features

    - name: Run tests
      working-directory: core
      run: cargo test --verbose --all-features

    - name: Build CLI tool
      working-directory: core
      run: cargo build --bin cli --verbose

    - name: Test CLI tool
      working-directory: core
      run: |
        cargo run --bin cli -- --help
        cargo run --bin cli -- info

    - name: Run examples
      working-directory: core
      run: cargo run --example basic_usage

    - name: Check documentation
      working-directory: core
      run: cargo doc --no-deps --all-features

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: core

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      working-directory: core
      run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: core

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libfontconfig1-dev \
          libfreetype6-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libegl1-mesa-dev \
          libxcb-composite0-dev \
          libxcb-shape0-dev \
          libxcb-xfixes0-dev

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Generate code coverage
      working-directory: core
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: core/lcov.info
        fail_ci_if_error: true

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: world-foundry-linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: world-foundry-windows.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: world-foundry-macos
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: world-foundry-macos-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: core

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libfontconfig1-dev \
          libfreetype6-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libegl1-mesa-dev \
          libxcb-composite0-dev \
          libxcb-shape0-dev \
          libxcb-xfixes0-dev

    - name: Build release binary
      working-directory: core
      run: cargo build --release --bin cli --target ${{ matrix.target }}

    - name: Prepare artifact
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp core/target/${{ matrix.target }}/release/cli.exe ${{ matrix.artifact_name }}
        else
          cp core/target/${{ matrix.target }}/release/cli ${{ matrix.artifact_name }}
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: core

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libfontconfig1-dev \
          libfreetype6-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libegl1-mesa-dev \
          libxcb-composite0-dev \
          libxcb-shape0-dev \
          libxcb-xfixes0-dev

    - name: Run benchmarks
      working-directory: core
      run: |
        # Add benchmark commands when benchmarks are implemented
        echo "Benchmarks will be added in future iterations"
        cargo build --release

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: core

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libfontconfig1-dev \
          libfreetype6-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libegl1-mesa-dev \
          libxcb-composite0-dev \
          libxcb-shape0-dev \
          libxcb-xfixes0-dev

    - name: Build documentation
      working-directory: core
      run: cargo doc --no-deps --all-features --document-private-items

    - name: Deploy documentation (main branch only)
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: core/target/doc
        destination_dir: docs