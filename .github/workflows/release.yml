name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: get_version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        release_name: World Foundry ${{ steps.get_version.outputs.version }}
        body: |
          ## World Foundry ${{ steps.get_version.outputs.version }}
          
          Cross-platform fantasy map generator that imports Azgaar maps with native performance.
          
          ### Features
          - üó∫Ô∏è Import Azgaar Fantasy Map Generator files
          - üé® Cross-platform rendering engine
          - üöÄ Native performance on Windows, macOS, and Linux
          - üõ†Ô∏è Command-line interface for automation
          - üìä Comprehensive world generation algorithms
          
          ### Downloads
          Choose the appropriate binary for your platform:
          - **Linux**: `world-foundry-linux`
          - **Windows**: `world-foundry-windows.exe`
          - **macOS (Intel)**: `world-foundry-macos`
          - **macOS (Apple Silicon)**: `world-foundry-macos-arm64`
          
          ### Installation
          1. Download the binary for your platform
          2. Make it executable (Linux/macOS): `chmod +x world-foundry-*`
          3. Run: `./world-foundry-* --help`
          
          ### Documentation
          - [Project Documentation](https://balexda.github.io/WorldFoundry/docs/)
          - [Architecture Guide](https://github.com/Balexda/WorldFoundry/blob/main/docs/architecture/ARCHITECTURE.md)
          - [API Documentation](https://balexda.github.io/WorldFoundry/docs/world_foundry/)
        draft: false
        prerelease: false

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: world-foundry-linux
            asset_name: world-foundry-linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: world-foundry-windows.exe
            asset_name: world-foundry-windows.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: world-foundry-macos
            asset_name: world-foundry-macos
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: world-foundry-macos-arm64
            asset_name: world-foundry-macos-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: core

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libfontconfig1-dev \
          libfreetype6-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libegl1-mesa-dev \
          libxcb-composite0-dev \
          libxcb-shape0-dev \
          libxcb-xfixes0-dev

    - name: Build release binary
      working-directory: core
      run: cargo build --release --bin cli --target ${{ matrix.target }}

    - name: Strip binary (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: strip core/target/${{ matrix.target }}/release/cli

    - name: Prepare artifact
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp core/target/${{ matrix.target }}/release/cli.exe ${{ matrix.artifact_name }}
        else
          cp core/target/${{ matrix.target }}/release/cli ${{ matrix.artifact_name }}
        fi

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ matrix.artifact_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream

  publish-crate:
    name: Publish to crates.io
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: core

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libfontconfig1-dev \
          libfreetype6-dev \
          libgl1-mesa-dev \
          libglu1-mesa-dev \
          libegl1-mesa-dev \
          libxcb-composite0-dev \
          libxcb-shape0-dev \
          libxcb-xfixes0-dev

    - name: Publish to crates.io
      working-directory: core
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      continue-on-error: true  # Don't fail if already published

  update-homebrew:
    name: Update Homebrew Formula
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Update Homebrew formula
      uses: dawidd6/action-homebrew-bump-formula@v3
      with:
        token: ${{ secrets.HOMEBREW_TOKEN }}
        formula: world-foundry
      continue-on-error: true  # Don't fail if formula doesn't exist yet